/*******************************************************************************
 * Copyright (c) 2016, George Sedov
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/

using System;
using UnityEngine;
using KSP.UI.Screens;

namespace KSPInputLockTester {
  [KSPAddon (KSPAddon.Startup.MainMenu, true)]
  public class InputLockTester : MonoBehaviour {
    private ApplicationLauncherButton appButton = null;
    private Texture2D appButtonTexture;

    private bool mainWindowShown = false;
    private readonly int mainWindowId = 841358683;
    private Rect mainWindowPos = new Rect (Screen.width / 10, 20, 900, 0);

    internal void Awake () {
      DontDestroyOnLoad (this);
      appButtonTexture = new Texture2D (64, 64);
      appButtonTexture.LoadImage (new byte[] {
            0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 
            0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 
            0x08, 0x06, 0x00, 0x00, 0x00, 0xaa, 0x69, 0x71, 0xde, 0x00, 0x00, 0x05, 
            0xf6, 0x49, 0x44, 0x41, 0x54, 0x78, 0xda, 0xed, 0x9a, 0x6b, 0x88, 0x55, 
            0x55, 0x14, 0xc7, 0x7f, 0xfb, 0xce, 0x9d, 0xb1, 0xd7, 0x14, 0x65, 0x96, 
            0x65, 0x99, 0xa9, 0xbd, 0x45, 0xf3, 0x91, 0xcf, 0xb2, 0x90, 0x32, 0x28, 
            0xfc, 0x62, 0x86, 0x09, 0x56, 0x6a, 0x7e, 0x48, 0x08, 0x31, 0x7c, 0x7c, 
            0xc8, 0x07, 0x62, 0xf8, 0x29, 0x53, 0x88, 0xc0, 0x82, 0xb1, 0x87, 0x1f, 
            0xc3, 0x08, 0x22, 0x33, 0x15, 0xc4, 0x8a, 0x4a, 0xcd, 0x47, 0x86, 0x5a, 
            0x64, 0x23, 0xd2, 0x4b, 0xa7, 0x1c, 0x83, 0x4c, 0xef, 0xe8, 0x38, 0xf3, 
            0xef, 0x83, 0xeb, 0xe6, 0x66, 0x7b, 0xce, 0xb9, 0x67, 0xc6, 0x3b, 0xa3, 
            0x75, 0xcf, 0x1f, 0x2e, 0x73, 0xf6, 0x7a, 0x9c, 0xbd, 0xf6, 0xda, 0x7b, 
            0xaf, 0xbd, 0xd6, 0x3e, 0x03, 0x19, 0x32, 0x64, 0xc8, 0x90, 0x21, 0x43, 
            0x86, 0x0c, 0x19, 0x32, 0x64, 0xc8, 0x50, 0x81, 0x70, 0x7e, 0x43, 0xd2, 
            0x22, 0x60, 0x06, 0xa0, 0xff, 0xf1, 0x78, 0x57, 0x3a, 0xe7, 0x96, 0x9c, 
            0xe3, 0x00, 0x49, 0x9b, 0x81, 0x07, 0x2b, 0x64, 0xe2, 0x3f, 0x75, 0xce, 
            0x3d, 0xf4, 0xaf, 0x03, 0x24, 0x0d, 0x06, 0xb6, 0x57, 0xd8, 0xea, 0x1f, 
            0xe2, 0x9c, 0xdb, 0x91, 0xb3, 0xc6, 0xb4, 0x0a, 0xdc, 0xfe, 0xd3, 0x00, 
            0x8a, 0x0e, 0xe8, 0x52, 0x81, 0x0e, 0xe8, 0xe2, 0x3b, 0xa0, 0x62, 0x91, 
            0x0f, 0xda, 0x02, 0x76, 0x1a, 0x5d, 0xc0, 0xb5, 0xc0, 0x4d, 0xc6, 0x3b, 
            0x6c, 0x3f, 0x07, 0x9c, 0x06, 0xfa, 0x03, 0xd5, 0xc6, 0xdb, 0xe1, 0xe9, 
            0xe4, 0x81, 0x7e, 0x46, 0xff, 0x1b, 0xd8, 0x6f, 0x8e, 0x6e, 0x06, 0x86, 
            0x78, 0x7d, 0xed, 0x07, 0x8e, 0xdb, 0xf3, 0xe5, 0xc0, 0x6d, 0x1e, 0x6f, 
            0xbb, 0xbd, 0xbb, 0xd5, 0xe8, 0x57, 0x18, 0x7d, 0x8f, 0xf5, 0x5d, 0xb4, 
            0x61, 0xb0, 0xd1, 0x9b, 0x81, 0x6f, 0x3d, 0x1b, 0xba, 0xdb, 0x0f, 0xe0, 
            0x17, 0xe0, 0x88, 0xa7, 0x33, 0x28, 0x3c, 0xfd, 0x90, 0x54, 0xa7, 0x33, 
            0x98, 0x1b, 0x7a, 0xc8, 0xe8, 0x8a, 0xa0, 0x4f, 0x31, 0xd6, 0xba, 0x08, 
            0x5e, 0xbd, 0xf1, 0x46, 0x06, 0xf4, 0x85, 0x46, 0x2f, 0x44, 0xe8, 0x14, 
            0x8c, 0xb7, 0x30, 0xa0, 0x8f, 0x34, 0x7a, 0x7d, 0x84, 0xce, 0x3a, 0xe3, 
            0x4d, 0x69, 0x83, 0xdd, 0x73, 0x8d, 0x55, 0x17, 0xb5, 0x05, 0xf2, 0x71, 
            0x4b, 0x45, 0x52, 0x55, 0x40, 0xaa, 0x8e, 0xca, 0x25, 0xbc, 0x95, 0x04, 
            0x50, 0x13, 0xd0, 0xab, 0x02, 0x7e, 0x94, 0x4e, 0xd8, 0x4f, 0x4d, 0x82, 
            0x8e, 0x0b, 0x6c, 0x89, 0xb3, 0x35, 0x76, 0x8c, 0x9d, 0x1d, 0x03, 0x5c, 
            0x99, 0x64, 0xca, 0x86, 0xd0, 0x01, 0xa7, 0x62, 0xad, 0x72, 0xae, 0x25, 
            0x20, 0x9d, 0xb4, 0xbf, 0x2d, 0x09, 0xb3, 0x59, 0x48, 0xfb, 0xfe, 0x04, 
            0x99, 0x42, 0xc2, 0x0a, 0x68, 0x09, 0x6c, 0x89, 0xb3, 0x35, 0xf6, 0xfd, 
            0xc5, 0x44, 0xa8, 0x0e, 0x78, 0xce, 0x82, 0xc4, 0x17, 0xb6, 0xa4, 0x04, 
            0x5c, 0x0f, 0xf4, 0x35, 0xd9, 0x83, 0xc0, 0xaf, 0x5e, 0x30, 0x19, 0x0a, 
            0x5c, 0x62, 0xbc, 0xcf, 0xbc, 0xa5, 0x55, 0x05, 0x0c, 0xb3, 0xe7, 0x3f, 
            0x81, 0xbd, 0x5e, 0x10, 0x7c, 0xc0, 0x73, 0xfa, 0x6e, 0x0b, 0x92, 0x58, 
            0x90, 0x1b, 0x60, 0xcf, 0xad, 0xc0, 0xe7, 0x5e, 0x10, 0xbc, 0x07, 0xb8, 
            0xda, 0x78, 0x5b, 0xbd, 0x41, 0x9f, 0x06, 0x46, 0xdb, 0x73, 0x13, 0xb0, 
            0xcd, 0x0b, 0x82, 0x3d, 0x80, 0x5e, 0xc6, 0xfb, 0x11, 0x68, 0x30, 0xbb, 
            0x9b, 0x81, 0x51, 0x26, 0xb7, 0xca, 0x39, 0x37, 0x3d, 0x74, 0x40, 0x25, 
            0x61, 0x95, 0x73, 0x6e, 0x7a, 0x18, 0xf4, 0xb6, 0x00, 0xaf, 0xc4, 0x24, 
            0x46, 0x4d, 0xc0, 0xbb, 0x40, 0x2d, 0xf0, 0x31, 0xf0, 0xb6, 0x37, 0x4b, 
            0x77, 0x02, 0x8b, 0x4d, 0xee, 0x05, 0xa0, 0xd1, 0x3c, 0xde, 0x04, 0x2c, 
            0xb0, 0xa3, 0xe7, 0x20, 0x30, 0x0b, 0xb8, 0xcc, 0x66, 0x71, 0x14, 0x30, 
            0xd3, 0x74, 0x5e, 0xb3, 0x95, 0x57, 0x05, 0x9c, 0x00, 0x5e, 0x35, 0xf9, 
            0x66, 0xe0, 0x0d, 0xd3, 0x11, 0xd0, 0x15, 0x78, 0xdd, 0x74, 0x16, 0x03, 
            0xdf, 0x7b, 0xab, 0x6b, 0x2a, 0xf0, 0x18, 0x70, 0x0c, 0x78, 0xd6, 0x5b, 
            0x9d, 0xe1, 0xb6, 0x9d, 0x0b, 0x0c, 0x8f, 0x3b, 0x06, 0xe7, 0x24, 0xb9, 
            0x4c, 0xd2, 0x26, 0x93, 0x9b, 0x18, 0xd0, 0xf3, 0x09, 0xc7, 0x4e, 0xf1, 
            0xe8, 0x7b, 0x33, 0xa0, 0xf7, 0xd2, 0x59, 0xf4, 0x0a, 0x78, 0xfd, 0x25, 
            0x3d, 0x22, 0x69, 0xac, 0xa4, 0xee, 0x51, 0xc7, 0x9b, 0xa4, 0x7c, 0x40, 
            0x9f, 0x68, 0xf4, 0x4d, 0x25, 0xc6, 0x30, 0x27, 0xe9, 0x18, 0xac, 0x29, 
            0xb1, 0x6c, 0xaa, 0x62, 0xe4, 0x92, 0x52, 0xe9, 0xea, 0x98, 0x23, 0xb6, 
            0xf8, 0x8e, 0x6d, 0xc5, 0x00, 0x27, 0xe9, 0x2d, 0x73, 0xe2, 0x6e, 0x60, 
            0x03, 0xb0, 0x1e, 0x38, 0x24, 0xa9, 0x41, 0x52, 0xb1, 0x52, 0xdd, 0x18, 
            0xd3, 0x67, 0x4d, 0xcc, 0x31, 0x4a, 0xd2, 0x18, 0xf3, 0x31, 0x91, 0x3d, 
            0x0e, 0xa7, 0x63, 0xe4, 0x9a, 0x52, 0x44, 0xdd, 0xe6, 0x18, 0x9d, 0x46, 
            0xe0, 0x37, 0x49, 0xad, 0x09, 0x47, 0xe0, 0x75, 0xc0, 0x66, 0x49, 0x4b, 
            0x81, 0xe5, 0x31, 0x7d, 0x9e, 0x0c, 0x6c, 0x8c, 0xc3, 0xc9, 0x24, 0x07, 
            0x4c, 0x96, 0x74, 0x34, 0x62, 0xff, 0xc8, 0x14, 0x47, 0x58, 0x7b, 0x86, 
            0xa4, 0x5a, 0xf3, 0x66, 0x2b, 0x70, 0x87, 0xb7, 0xc4, 0xe6, 0x5b, 0xea, 
            0x99, 0x33, 0x23, 0x27, 0x19, 0x6b, 0x9c, 0xa4, 0xaf, 0xbc, 0x18, 0x30, 
            0xdc, 0x66, 0xff, 0x09, 0xdb, 0xb7, 0x69, 0xce, 0xff, 0xf9, 0xc0, 0x78, 
            0x93, 0x5f, 0x2e, 0x69, 0x9f, 0xf5, 0x73, 0x0a, 0x98, 0x6c, 0x32, 0x23, 
            0x24, 0x4d, 0xb5, 0x15, 0xe2, 0x22, 0x9c, 0x3e, 0x39, 0x6a, 0x5f, 0xd4, 
            0xe9, 0xc2, 0x60, 0xb1, 0xa4, 0x99, 0x11, 0xf4, 0x16, 0x49, 0xef, 0x4b, 
            0xda, 0x1a, 0xa3, 0x57, 0x2d, 0x69, 0xc3, 0x79, 0xf6, 0x5d, 0x97, 0x98, 
            0xfa, 0xa6, 0x80, 0x4a, 0xa4, 0xc1, 0xae, 0x84, 0x4e, 0x3d, 0x50, 0x07, 
            0xfc, 0x1c, 0xc8, 0x6c, 0x74, 0xce, 0x8d, 0xf5, 0x26, 0xe7, 0x2e, 0x60, 
            0x5f, 0x20, 0x33, 0x29, 0xc5, 0x5e, 0x6f, 0x57, 0x26, 0xb8, 0xcc, 0xa5, 
            0x00, 0xf0, 0x89, 0x0d, 0x64, 0x45, 0x04, 0xaf, 0xf8, 0xbb, 0x26, 0xa0, 
            0xcf, 0x31, 0xfa, 0x2e, 0x23, 0xf5, 0x8d, 0xca, 0xee, 0xfc, 0xc1, 0x5b, 
            0xfb, 0x3b, 0x3b, 0x4a, 0x7d, 0x8c, 0x07, 0xd6, 0x58, 0x92, 0xb5, 0xd2, 
            0xb5, 0x01, 0xc0, 0xb2, 0x24, 0x07, 0x34, 0xa6, 0x74, 0xdc, 0xef, 0x29, 
            0xe4, 0x8f, 0x05, 0xed, 0xa3, 0xf6, 0xf7, 0x88, 0x47, 0xeb, 0x11, 0xc8, 
            0xec, 0x89, 0xbb, 0xc3, 0x8b, 0x08, 0x8a, 0x85, 0x36, 0xda, 0x1c, 0x39, 
            0xc6, 0x5c, 0x3b, 0x0b, 0x11, 0x97, 0x42, 0xde, 0xa5, 0xd0, 0x51, 0xca, 
            0xfe, 0xa3, 0xec, 0xac, 0x2f, 0x47, 0x41, 0xd6, 0x5e, 0x07, 0x94, 0xdc, 
            0x7f, 0xce, 0xb9, 0xe6, 0x98, 0xd8, 0x90, 0x2f, 0x43, 0xe5, 0x27, 0xcf, 
            0x76, 0x77, 0x3e, 0x0e, 0x08, 0x83, 0xe0, 0x52, 0x49, 0xd3, 0x4a, 0x04, 
            0xc7, 0xd3, 0x40, 0x1f, 0x7b, 0x7e, 0xd9, 0x2e, 0x23, 0x8a, 0x45, 0xc8, 
            0x55, 0x5e, 0xf0, 0xfa, 0xcb, 0x4b, 0x89, 0x5b, 0x80, 0x5b, 0x8d, 0xf5, 
            0x90, 0xa4, 0x9d, 0xc0, 0x87, 0xc0, 0x3b, 0x69, 0xef, 0x23, 0x92, 0x8e, 
            0x46, 0x49, 0x4f, 0xa5, 0xd4, 0xf5, 0x6d, 0x8f, 0xed, 0xb0, 0x4f, 0x1b, 
            0x0d, 0x88, 0x93, 0xaf, 0xb5, 0x5f, 0x14, 0x7a, 0x5b, 0x5e, 0xdf, 0x00, 
            0x7c, 0x60, 0xfb, 0x39, 0x07, 0xfc, 0xd4, 0x86, 0x7e, 0x4f, 0x01, 0x7f, 
            0xb4, 0xd3, 0xe6, 0x58, 0x07, 0xac, 0x07, 0x16, 0x59, 0x22, 0x24, 0x0b, 
            0x36, 0x6b, 0x8c, 0x37, 0xc5, 0xf6, 0x5d, 0xce, 0x92, 0xa2, 0xd9, 0xc0, 
            0x93, 0xc0, 0x21, 0x60, 0x9c, 0xdd, 0xeb, 0x15, 0xbd, 0xbc, 0xc9, 0x12, 
            0x91, 0x15, 0xa6, 0x1f, 0xe5, 0xe8, 0x9c, 0x73, 0xae, 0x60, 0x11, 0xdd, 
            0xcf, 0x49, 0x9c, 0x73, 0x2e, 0xcd, 0x97, 0xa9, 0x5a, 0xe0, 0x66, 0x2b, 
            0x9d, 0x67, 0x03, 0x97, 0x7a, 0xe5, 0x74, 0x1f, 0x6f, 0x75, 0x4d, 0xb0, 
            0xa0, 0x5d, 0x2c, 0xce, 0x96, 0x00, 0x8f, 0xc6, 0x25, 0x42, 0xf3, 0xda, 
            0x70, 0xb7, 0x36, 0xd5, 0x58, 0x6b, 0x23, 0x78, 0x3f, 0x18, 0xef, 0xfe, 
            0x72, 0x9c, 0xd5, 0x92, 0x06, 0x06, 0x49, 0xcc, 0x16, 0x49, 0x39, 0x49, 
            0xcb, 0x25, 0x3d, 0x1d, 0xa3, 0x13, 0x67, 0xf7, 0xbc, 0xa4, 0x44, 0x28, 
            0xf1, 0x4e, 0x30, 0xb8, 0x69, 0xc9, 0x27, 0x04, 0xc4, 0x5c, 0xd2, 0xfb, 
            0x24, 0xdd, 0x07, 0x0c, 0x04, 0x6e, 0x07, 0x7a, 0xda, 0x0d, 0x6e, 0x57, 
            0xe0, 0x4a, 0x4b, 0x95, 0xf3, 0x31, 0x35, 0x88, 0xbf, 0x85, 0x5e, 0xb4, 
            0x82, 0x69, 0x4b, 0xb8, 0x72, 0xda, 0x72, 0x27, 0x98, 0x0f, 0x2a, 0xb6, 
            0x96, 0x36, 0x5c, 0x89, 0xb5, 0x78, 0x4b, 0x2e, 0x2e, 0x1b, 0x6c, 0x09, 
            0x06, 0x3e, 0x00, 0xf8, 0xa6, 0x0c, 0x8b, 0xa2, 0x9b, 0x9f, 0xd0, 0x48, 
            0xda, 0xe5, 0x9c, 0x1b, 0xe4, 0xdb, 0x1a, 0x31, 0xf9, 0xa1, 0xdd, 0xd5, 
            0xbe, 0x03, 0x36, 0x02, 0xcf, 0x00, 0xc3, 0x24, 0xf5, 0xb6, 0xfd, 0xd4, 
            0x6a, 0x1d, 0x15, 0x3b, 0x79, 0x1c, 0x38, 0xe0, 0x15, 0x39, 0xa3, 0x8c, 
            0x75, 0xb7, 0xa4, 0x9e, 0xb6, 0x27, 0x65, 0x55, 0xdf, 0x8d, 0xc6, 0x1b, 
            0x23, 0xa9, 0xc1, 0x3a, 0x3b, 0x55, 0xae, 0xf4, 0x35, 0x6e, 0x50, 0x92, 
            0xfa, 0xd9, 0x73, 0x6f, 0xcf, 0xee, 0xd1, 0x16, 0x2c, 0x73, 0x16, 0x6c, 
            0x87, 0x05, 0x65, 0xf5, 0x39, 0x17, 0x0d, 0x1d, 0x85, 0xf5, 0x92, 0x6e, 
            0xe9, 0xa0, 0x77, 0x7f, 0x29, 0xe9, 0x61, 0x49, 0x7b, 0x52, 0xca, 0x37, 
            0x44, 0xed, 0x87, 0x6e, 0xc0, 0x66, 0xf3, 0x5e, 0x6b, 0x07, 0xdc, 0x3e, 
            0x37, 0xa6, 0xbc, 0x86, 0x2f, 0x16, 0x4c, 0xef, 0x01, 0x23, 0x39, 0xfb, 
            0x65, 0xaa, 0x54, 0x72, 0xd3, 0x64, 0xba, 0xc7, 0x4b, 0xd8, 0x71, 0x00, 
            0x18, 0x73, 0x41, 0x6e, 0x21, 0x25, 0x0d, 0x4d, 0x39, 0x43, 0x37, 0x78, 
            0x3a, 0x6b, 0x53, 0xc8, 0x7f, 0x5d, 0xae, 0x6a, 0xb0, 0xc3, 0x7d, 0x90, 
            0x42, 0x66, 0x87, 0x73, 0xee, 0x90, 0xd7, 0x5e, 0xd0, 0x99, 0x1f, 0x46, 
            0x2e, 0x06, 0x0c, 0x0e, 0xda, 0x13, 0x2a, 0xcd, 0x01, 0x14, 0x3f, 0x9e, 
            0x4a, 0x7a, 0x1e, 0x78, 0xa9, 0xe2, 0x1c, 0xe0, 0x6d, 0x95, 0x13, 0x1d, 
            0xdd, 0xd1, 0xc5, 0xea, 0x80, 0xd5, 0x96, 0xd0, 0xac, 0xee, 0xe8, 0x8e, 
            0xf2, 0x17, 0xa9, 0x03, 0x0a, 0x56, 0xe2, 0x1e, 0xb7, 0x9b, 0xa5, 0xda, 
            0x4a, 0x73, 0xc0, 0xac, 0xce, 0xea, 0xa8, 0xb3, 0xb7, 0x40, 0x47, 0x39, 
            0xbc, 0xdd, 0x2b, 0xc4, 0x75, 0xf6, 0xd4, 0x4a, 0x1a, 0xc3, 0x99, 0x7f, 
            0xc8, 0xbc, 0x97, 0x33, 0x1f, 0x54, 0x7a, 0x7a, 0xb5, 0x7c, 0x5a, 0x1c, 
            0xb6, 0x8c, 0x6e, 0x2f, 0x67, 0x3e, 0xae, 0x7c, 0xe4, 0x9c, 0x3b, 0xfc, 
            0x9f, 0x70, 0x40, 0x09, 0xe7, 0xe4, 0xac, 0x1c, 0xae, 0x0a, 0x6c, 0x2c, 
            0x38, 0xe7, 0x4e, 0x92, 0x21, 0x43, 0x86, 0x0c, 0x19, 0x32, 0x64, 0x28, 
            0x27, 0xfe, 0x01, 0x89, 0xd5, 0xf2, 0xcf, 0x21, 0x4e, 0xdd, 0x24, 0x00, 
            0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
      });

      GameEvents.onGUIApplicationLauncherReady.Add (OnGUIApplicationLauncherReady);
      GameEvents.onGUIApplicationLauncherUnreadifying.Add (OnGUIApplicationLauncherUnreadifying);
      GameEvents.onHideUI.Add (OnHideUI);
      GameEvents.onShowUI.Add (OnShowUI);

    }
    protected virtual void OnDestroy () {
      // unsubscribe event listeners
      GameEvents.onGUIApplicationLauncherReady.Remove (OnGUIApplicationLauncherReady);
      GameEvents.onGUIApplicationLauncherUnreadifying.Remove (OnGUIApplicationLauncherUnreadifying);
    }
    private void OnGUIApplicationLauncherReady () {
      // create button
      if (ApplicationLauncher.Ready && appButton == null)
        appButton = ApplicationLauncher.Instance.AddModApplication (ShowMainWindow, HideMainWindow, null, null, Enable, Disable,
                                                                    ApplicationLauncher.AppScenes.ALWAYS, appButtonTexture);
    }

    private void OnGUIApplicationLauncherUnreadifying (GameScenes scene) {
      // remove button
      if (appButton != null) {
        mainWindowShown = false;
        ApplicationLauncher.Instance.RemoveModApplication (appButton);
        appButton = null;
      }
    }
    private void OnHideUI () {
      mainWindowShown = false;
    }
    private void OnShowUI () {
      if (appButton != null)
        mainWindowShown = (appButton.toggleButton.CurrentState == KSP.UI.UIRadioButton.State.True);
    }
    protected void ShowMainWindow () {
      mainWindowShown = true;
    }
    private void HideMainWindow () {
      mainWindowShown = false;
    }
    public void Disable () {
      if (appButton != null && appButton.toggleButton.Interactable)
        appButton.Disable ();
    }
    public void Enable () {
      if (appButton != null && appButton.toggleButton.Interactable == false)
        appButton.Enable ();
    }

    internal void OnGUI () {
      if (mainWindowShown)
        mainWindowPos = GUILayout.Window (mainWindowId, mainWindowPos, (id) => DrawMainWindow (), "Input Lock Tester", GUILayout.ExpandHeight (true));
    }

    private void DrawMainWindow () {
      ulong curlock = InputLockManager.LockMask;
      ControlTypes ourlock = InputLockManager.GetControlLock("InputLockTester");
      bool changed = false;
      int num = 0;
      foreach (ControlTypes type in Enum.GetValues (typeof (ControlTypes))) {
        if (type == ControlTypes.None)
          continue;

        bool locked = (curlock & (ulong)type) == (ulong)type;//InputLockManager.IsLocked (type);
        bool lockedbyus = (ourlock & type) == type;

        if (num % 3 == 0)
          GUILayout.BeginHorizontal ();
        if (locked && !lockedbyus)
          GUI.enabled = false;
        bool rez = GUILayout.Toggle (lockedbyus, "Lock", "button", GUILayout.Width(50));
        GUI.enabled = true;
        GUILayout.Label (type.ToString (), GUILayout.Width(250));
        if (num % 3 == 2)
          GUILayout.EndHorizontal ();

        if (rez != lockedbyus) {
          changed = true;
          if (rez)
            ourlock |= type;
          else
            ourlock &= ~type;
        }
        num++;
      }
      if (num % 3 != 0)
        GUILayout.EndHorizontal ();

      if (changed)
        if (ourlock == ControlTypes.None)
          InputLockManager.RemoveControlLock ("InputLockTester");
        else
          InputLockManager.SetControlLock (ourlock, "InputLockTester");

      GUI.DragWindow ();
    }
  }
}
